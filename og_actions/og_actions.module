<?php
// $Id: og_actions.module,v 1.3 2008/08/09 03:28:01 weitzman Exp $

/**
 * Implementation of hook_action_info().
 */
function og_actions_action_info() {
  $actions = array(
    'og_remove_groups_action' => array(
      'type' => 'node',
      'description' => t('Remove post from all groups'),
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'og_add_group_action' => array(
      'type' => 'node',
      'description' => t('Add post to the specified group'),
      'configurable' => TRUE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'og_remove_group_action' => array(
      'type' => 'node',
      'description' => t('Remove post from the specified group'),
      'configurable' => TRUE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
  );
  if (module_exists('og_access')) {
    $actions += array(
      'og_make_public_action' => array(
        'type' => 'node',
        'description' => t('Make post publicly visible'),
        'configurable' => FALSE,
        'hooks' => array(
          'nodeapi' => array('insert', 'update'),
        ),
      ),
      'og_make_private_action' => array(
        'type' => 'node',
        'description' => t('Make post private to its groups'),
        'configurable' => FALSE,
        'hooks' => array(
          'nodeapi' => array('insert', 'update'),
        ),
      ),
    );
  }
  return $actions;
}

/**
 * Action to make a node public in organic groups. Requires actions.module.
 */
function og_make_public_action($node, $context) {
  if (isset($node->og_groups)) {
    $node->og_public = 1;
    watchdog('action', 'Set node %id to public.', array('%id' => intval($node->nid)));
  }
}

/**
 * Action to make a node private in organic groups. Requires actions.module.
 */
function og_make_private_action($node, $context) {
  if (isset($node->og_groups)) {
    $node->og_public = 0;
    watchdog('action', 'Set node %id to private.', array('%id' => intval($node->nid)));
  }
}

/**
 * Action to remove a node from all groups. Requires actions.module.
 */
function og_remove_groups_action($node, $context) {
  if (!empty($node->og_groups)) {
    $node->og_groups = array();
    watchdog('action', 'Removed node %id from all groups.', array('%id' => intval($node->nid)));
  }
}

/**
 * A configurable action to add a node to a specific group in organic groups.
 * Requires actions.module.
 */
function og_add_group_action($node, $context) {
  if (isset($context['group'])) {

    $node->og_groups[] = $context['group'];
    watchdog('action', 'Added node id %id to %group.', array('%id' => intval($node->nid), '%group' => $context['group']));
  }
}

/**
 * Configuration form for Add Group action.
 */
function og_add_group_action_form($context) {

  if (!isset($context['group'])) {
    $context['group'] = '';
  }

  $groups = og_all_groups_options();
  if (count($groups)) {
    $form = array();
    $form['group'] = array(
      '#type' => 'select',
      '#title' => t('Group'),
      '#options' => $groups,
      '#description' => t('Select the group to add to the node.'),
      '#default_value' => $context['group'],
      '#required' => TRUE,
    );
  }
  else {
    drupal_set_message(t('Please <a href="!url">create</a> a group first.', array('!url' => url('admin/content'))));
  }
  return $form;
}

function og_add_group_action_submit($form, &$form_state) {
  return array(
    'group' => $form_state['values']['group'],
  );
}

/**
 * A configurable action to remove a node from a specific group in og.
 * Requires actions.module
 */
function og_remove_group_action($node, $context) {
  if (isset($context['group'])) {
    foreach ($node->og_groups as $key => $gid) {
      if ($gid == $context['group']) {
        unset($node->og_groups[$key]);
      }
    }
    watchdog('action', 'Removed node id %id from %group.', array('%id' => intval($node->nid), '%group' => $context['group']));
  }
}

/**
 * Configuration form for Remove Group action.
 */
function og_remove_group_action_form($context) {

  if (!isset($context['group'])) {
    $context['group'] = '';
  }

  $groups = og_all_groups_options();
  if (count($groups)) {
    $form = array();
    $form['group'] = array(
      '#type' => 'select',
      '#title' => t('Group'),
      '#options' => $groups,
      '#description' => t('Select the group to remove from the node.'),
      '#default_value' => $context['group'],
      '#required' => TRUE,
    );
  }
  else {
    drupal_set_message(t('There are no groups. You must have at least one existing group with nodes assigned to use this action.'));
  }
  return $form;
}

/**
 * Submit handler for Remove Group action configuration.
 */
function og_remove_group_action_submit($form, &$form_state) {
  return array(
    'group' => $form_state['values']['group'],
  );
}

/**
 * Implementation of hook_rules_action_info_alter().
 *
 * Lets the actions show up under "Organic Groups" in rules.
 */
function og_actions_rules_action_info_alter(&$actions) {
  foreach (array_keys(og_actions_action_info()) as $action_name) {
    $actions['rules_core_'. $action_name]['module'] = 'Organic groups';
  }
}
