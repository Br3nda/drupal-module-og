<?php

class OgBasicsTest extends DrupalTestCase {
  function get_info() {
    return array('name' => t('Basic og test'), 'desc' => t('Tests basic og functionality... etc ...') , 'group' => 'og tests');
  }
  
  function addOg($selective = OG_OPEN) {
    $edit = array();
    $edit['title']    = '!SimpleTest test group node! ' . $this->randomName(10);
    $edit['og_description'] = '!SimpleTest og description' . $this->randomName(10);
    $edit['body']     = '!SimpleTest test group welcome message! ' . $this->randomName(32) . ' ' . $this->randomName(32);
    $edit['og_selective'] = (string)$selective;

    $url = url('node/add/og', NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    foreach ($edit as $field_name => $field_value) {
      $ret = $this->_browser->setFieldByName("edit[$field_name]", $field_value);
      $this->assertTrue($ret, " [browser] Setting edit[$field_name]=\"$field_value\"");
    }
    $this->_browser->setFieldByName('edit[og_theme]', ''); // May not be present, so no error catching
    
    $ret = $this->_browser->clickSubmit(t('Submit'));
//    $ret = $this->_browser->clickSubmitByName('op');
    $this->assertTrue($ret, ' [browser] POST by click on ' . t('Submit'));
    $this->_content = $this->_browser->getContent();

    //die(var_dump($this->_browser->_page));
    $this->assertWantedText(t('Your %post was created.', array ('%post' => 'group')), 'Group created');

    $node = node_load(array('title' => $edit['title']));
    $this->assertNotNull($node, 'Group found in database. %s');
    $this->_cleanupGroups[] = $node->nid;
    
    return $node->nid;
  }
  
  function tearDown() {
    while (sizeof($this->_cleanupGroups) > 0) {
      $gid = array_pop($this->_cleanupGroups);
      node_delete($gid);
    }
    parent::tearDown();
  }
  
  function testAddOg() {
    $web_user = $this->drupalCreateUserRolePerm(array('access content', 'create pages', 'create groups'));
    $this->drupalLoginUser($web_user);
    $gid = $this->addOg(OG_OPEN);
    $node = node_load($gid);
    
    $b = $this->_browser;
    $this->_browser = new SimpleBrowser();

    
    $join_user = $this->drupalCreateUserRolePerm(array('access content'));
    $this->drupalLoginUser($join_user);
    
    /* Test subscribing a new user */
    $url = url('og/subscribe/' . $gid, NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    // No theme, "Text" only
    $this->assertWantedText(t('Subscribed to the %group group', array('%group' => $node->title)),
                            'User subscribed to group - text found.');
    $this->assertNoUnwantedText(t('Page not found'), 'page not not found.');

    /* Find user in list */
    $url = url('og/users/' . $gid, NULL, NULL, TRUE);
    $ret = $b->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assert(new TextExpectation($join_user->name),
                    $b->getContentAsText(), $message);
    
    /** @TODO: Test Posting etc... */
    
    // Test subscribing a new user 
    $url = url('og/unsubscribe/' . $gid, NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assertWantedText(t('User unsubscribed from group.'), 'User unsubscribed to group - text found.');
    $this->assertNoUnwantedText(t('Page not found'), 'page not not found.');

    $this->_browser = $b;
    
    // Find user in list */
    $url = url('og/users/' . $gid, NULL, NULL, TRUE);
    $ret = $b->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assertNoUnwantedText($join_user->name, 'User name not found.');

    // CLOSED GROUP ************************************************************
    $gid = $this->addOg(OG_CLOSED);
    $node = node_load($gid);
   
    $b = $this->_browser;
    $this->_browser = new SimpleBrowser();
    $this->drupalLoginUser($join_user);

    // Test subscribing a new user 
    $url = url('og/subscribe/' . $gid, NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assertNoUnwantedText(t('Subscribed to the %group group', array('%group' => $node->title)),
                                'User subscribed to group - text not found.');

    $this->assertNoUnwantedText(t('Page not found'), 'page not not found.');
    
    $this->assertWantedText(t('Subscription request to the %group group was rejected, only group administrators can add users to this group.',
                                           array('%group' => $node->title)), 'Rjected text found.');
    // Find user in list 
    $url = url('og/users/' . $gid, NULL, NULL, TRUE);
    $ret = $b->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assert(new NoTextExpectation($join_user->name),
                    $b->getContentAsText(), 'Username not found');

    $this->_browser = $b;
    
    /* INVITE ONLY GROUP ********************************************************/
    $gid = $this->addOg(OG_INVITE_ONLY);
    $node = node_load($gid);

    $b = $this->_browser;
    $this->_browser = new SimpleBrowser();

    $this->drupalLoginUser($join_user);

    // Test subscribing a new user 
    $url = url('og/subscribe/' . $gid, NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assertNoUnwantedText(t('Subscribed to the %group group', array('%group' => $node->title)),
                                'User subscribed to group - text not found.');

    $this->assertNoUnwantedText(t('Page not found'), 'page not not found.');
    
    $this->assertWantedText(t('Subscription request to the %group group was rejected, only group administrators can add users to this group.',
                                           array('%group' => $node->title)), 'Rjected text found.');

                                           // Find user in list 
    $url = url('og/users/' . $gid, NULL, NULL, TRUE);
    $ret = $b->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assert(new NoTextExpectation($join_user->name),
                    $b->getContentAsText(), 'Username not found');


    $this->_browser = $b;
    // MODERATED GROUP ---------------------------------------------
    $gid = $this->addOg(OG_MODERATED);
    $node = node_load($gid);
    
    $b = $this->_browser;
    $this->_browser = new SimpleBrowser();

    $this->drupalLoginUser($join_user);

    // Test subscribing a new user 
    $url = url('og/subscribe/' . $gid, NULL, NULL, TRUE);
    $ret = $this->_browser->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assertNoUnwantedText(t('Subscribed to the %group group', array('%group' => $node->title)),
                                'User subscribed to group - text not found.');

    $this->assertNoUnwantedText(t('Page not found'), 'page not not found.');
    
    $this->assertWantedText(t('Subscription request to the %group group awaits approval by an administrator.',
                                           array('%group' => $node->title)), 'Approval text found.');
    // Find user in list  ||Inactive users _ARE_ listed
    /*$url = url('og/users/' . $gid, NULL, NULL, TRUE);
    $ret = $b->get($url);
    $this->assertTrue($ret, " [browser] GET $url");
    $this->assert(new NoTextExpectation($join_user->name),
                    $b->getContentAsText(), 'Username not found');*/
    
  }
}